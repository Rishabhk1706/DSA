https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/description/ (987) 16-08-25

class Triple{
    TreeNode node;
    int row;
    int col;
    Triple(TreeNode n, int r, int c){
        node = n;
        row = r;
        col = c;
    }
}

class Solution {
    public List<List<Integer>> verticalTraversal(TreeNode root) {
        TreeMap<Integer, List<int[]>> map = new TreeMap<>();
        Queue<Triple> q = new LinkedList<>();
        q.offer(new Triple(root, 0, 0));
        while (!q.isEmpty()) {
            Triple curr = q.poll();
            map.putIfAbsent(curr.col, new ArrayList<>());
            map.get(curr.col).add(new int[]{curr.row, curr.node.val});
            if (curr.node.left != null)
                q.offer(new Triple(curr.node.left, curr.row + 1, curr.col - 1));
            if (curr.node.right != null)
                q.offer(new Triple(curr.node.right, curr.row + 1, curr.col + 1));
        }

        List<List<Integer>> res = new ArrayList<>();
        for (List<int[]> list : map.values()) {
            list.sort((a, b) -> {
                if (a[0] != b[0]) return a[0] - b[0]; // row
                return a[1] - b[1]; // value
            });
            List<Integer> colVals = new ArrayList<>();
            for (int[] p : list) colVals.add(p[1]);
            res.add(colVals);
        }

        return res;
    }
}
