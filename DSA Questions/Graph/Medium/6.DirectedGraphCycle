https://www.geeksforgeeks.org/problems/detect-cycle-in-a-directed-graph/1

class Solution {
    public boolean dfs(int node,boolean[] path, List<List<Integer>> adj, boolean[] visited){
        visited[node]=true;
        path[node]=true;
        for(int nbr : adj.get(node)){
            if(!visited[nbr]){
                if(dfs(nbr,path,adj,visited)){
                    return true;
                }
            }
            else if(path[nbr]){
                return true;
            }
        }
        path[node] = false;
        return false;
    }
    public boolean isCyclic(int V, int[][] edges) {
        boolean[] visited = new boolean[V];
        boolean[] path = new boolean[V];
        List<List<Integer>> adj = new ArrayList<>();
        for(int i=0;i<V;i++){
            adj.add(new ArrayList<>());
        }
        for(int[] e : edges){
            int u = e[0];
            int v = e[1];
            adj.get(u).add(v);
        }
        for(int i=0;i<V;i++){
            if(!visited[i]){
                if(dfs(i,path,adj,visited)){
                    return true;
                }
            }
        }
        return false;
    }
}