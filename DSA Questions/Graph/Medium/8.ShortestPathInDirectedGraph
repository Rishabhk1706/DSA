https://www.geeksforgeeks.org/problems/shortest-path-in-undirected-graph/1

class Pair{
    int nbr;
    int weight;
    Pair(int n,int w){
        nbr = n;
        weight = w;
    }
}
class Solution {
    public int[] shortestPath(int V, int E, int[][] edges) {
        ArrayList<ArrayList<Pair>> adj = new ArrayList<>();
        for(int i=0;i<V;i++){
            adj.add(new ArrayList<Pair>());
        }
        for(int i=0;i<edges.length;i++){
            int u = edges[i][0];
            int v = edges[i][1];
            int w = edges[i][2];
            adj.get(u).add(new Pair(v,w));
        }
        boolean[] visited = new boolean[V];
        Stack<Integer> st = new Stack<>();
        for(int i=0;i<V;i++){
            if(!visited[i]){
                topoSort(i, adj, visited, st);
            }
        }
        int[] dist = new int[V];
        Arrays.fill(dist,Integer.MAX_VALUE);
        dist[0] = 0;
        while(!st.isEmpty()){
            int u = st.pop();
            if(dist[u] != Integer.MAX_VALUE){
                for(Pair curr : adj.get(u)){
                    int v = curr.nbr;
                    int wt = curr.weight;
                    if(dist[u]+wt < dist[v]){
                        dist[v] = dist[u]+wt;
                    }
                }
            }
        }
        for(int i=0;i<V;i++){
            if(dist[i]==Integer.MAX_VALUE){
                dist[i] = -1;
            }
        }
        return dist;
    }
    public void topoSort(int node, ArrayList<ArrayList<Pair>> adj, boolean[] visited, Stack<Integer> st){
        visited[node] = true;
        for(Pair p : adj.get(node)){
            if(!visited[p.nbr]){
                topoSort(p.nbr, adj, visited, st);
            }
        }
        st.push(node);
    }
}