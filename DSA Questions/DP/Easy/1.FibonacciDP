https://leetcode.com/problems/climbing-stairs/ 

//Memorization
class Solution {
    public static int fib(int n, int[] arr){
        if(n==1 || n==2) return n;
        if(arr[n]!=-1) return arr[n];
        arr[n] = fib(n-1,arr) + fib(n-2,arr);
        return arr[n];
    }
    public int climbStairs(int n) {
        //DP
        int[] arr = new int[n+1];
        Arrays.fill(arr,-1);
        return fib(n,arr);
    }
}
//Complexity = O(n), Space = O(n) + O(n);

//Tabulation
class Solution {
    public int climbStairs(int n) {
        int[] dp = new int[n+2];
        Arrays.fill(dp,-1);
        dp[0]=0;
        dp[1]=1;
        for(int i=2;i<(n+2);i++){
            dp[i] = dp[i-1] + dp[i-2];
        }
        return dp[n+1];
    }
}
//Complexity = O(n), Space = O(n);

//More space efficient
class Solution {
    public int climbStairs(int n) {
        int prev = 1;
        int prev2 = 0;
        for(int i=2;i<(n+2);i++){
            int val = prev + prev2;
            prev2 = prev;
            prev = val;
        }
        return prev;
    }
}
//Complexity = O(n), Space = O(1);