https://leetcode.com/problems/minimum-falling-path-sum/description/

// Memorization

class Solution {
    public static int f(int i, int j,int[][] dp,int[][] matrix){
        if(j<0 || j>=matrix.length) return Integer.MAX_VALUE;
        if(i==0) return matrix[i][j];
        if(dp[i][j] != -1) return dp[i][j];
        int mid = f(i-1,j,dp,matrix);
        int left = f(i-1,j-1,dp,matrix);
        int right = f(i-1,j+1,dp,matrix);
        return dp[i][j] = Math.min(mid,Math.min(left,right)) + matrix[i][j];
    }
    public int minFallingPathSum(int[][] matrix) {
        int n = matrix.length;
        if(n==1) return matrix[0][0];
        int[][] dp = new int[n][n];
        for(int i=0;i<n;i++){
            Arrays.fill(dp[i],-1);
        }
        int mini = Integer.MAX_VALUE;
        for(int i=0;i<n;i++){
            mini = Math.min(mini, f(n-1,i,dp,matrix));
        }
        return mini;
    }
}

// Tabulation

class Solution {
    public int minFallingPathSum(int[][] matrix) {
        int n = matrix.length;
        if(n==1) return matrix[0][0];
        int[][] dp = new int[n][n];
        for(int i=0;i<n;i++){
            dp[n-1][i] = matrix[n-1][i];
        }
        for(int i=n-2;i>=0;i--){
            for(int j=0;j<n;j++){
                int left = (j>0) ? dp[i+1][j-1] : Integer.MAX_VALUE; 
                int mid =  dp[i+1][j];
                int right = (j<n-1) ? dp[i+1][j+1] : Integer.MAX_VALUE;
                dp[i][j] = Math.min(left, Math.min(mid,right)) + matrix[i][j];
            }
        }
        int mini = Integer.MAX_VALUE;
        for(int i=0;i<n;i++){
            mini = Math.min(mini,dp[0][i]);
        }
        return mini;
    }
}