https://leetcode.com/problems/minimum-path-sum/description/

//MEMORIZATION - Time - O(N x M)  Space - O(N + M) + O(N x M)

class Solution {
    public static int f(int i,int j,int[][] dp,int[][] grid){
        if(i==0 && j==0) return grid[i][j];
        if(i<0 || j<0) return Integer.MAX_VALUE;
        if(dp[i][j] != -1) return dp[i][j];
        int top = f(i-1,j,dp,grid);
        int left = f(i,j-1,dp,grid);
        return dp[i][j] = Math.min(top,left) + grid[i][j];
    }
    public int minPathSum(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        int[][] dp = new int[n][m];
        for(int i=0;i<n;i++){
            Arrays.fill(dp[i],-1);
        }
        return f(n-1,m-1,dp,grid);
    }
}

// TABULATION - Time - O(N x M)  Space - O(N x M)

class Solution {
    public int minPathSum(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        int[][] dp = new int[n][m];
        dp[0][0] = grid[0][0];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(i==0 && j>0){
                    dp[i][j] = grid[i][j] + dp[i][j-1];
                }
                else if(j==0 && i>0){
                    dp[i][j] = grid[i][j] + dp[i-1][j];
                }
                else if(i>0 && j>0){
                    dp[i][j] = Math.min(dp[i-1][j],dp[i][j-1]) + grid[i][j];
                }
            }
        }
        return dp[n-1][m-1];
    }
}

// TABULATION - Time - O(N x M)  Space - O(M)

class Solution {
    public int minPathSum(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        int[] dp = new int[m];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(i==0 && j==0){
                    dp[j] = grid[i][j];
                }
                else{
                    int top = (i>0) ? dp[j] : Integer.MAX_VALUE;
                    int left = (j>0) ? dp[j-1] : Integer.MAX_VALUE;
                    dp[j] = Math.min(top,left) + grid[i][j];
                }
            }
        }
        return dp[m-1];
    }
}