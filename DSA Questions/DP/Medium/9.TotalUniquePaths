https://www.naukri.com/code360/problems/total-unique-paths_1081470?leftPanelTabValue=PROBLEM

// MEMORIZATION - Time - O(M x N)  Space - O((M-1) x (N-1)) + O(M x N)

import java.util.* ;
import java.io.*; 
public class Solution {
	public static int f(int[][] dp, int i, int j){
		if(i==0 && j==0){
			return 1;
		}
		if(i<0 || j<0){
			return 0;
		}
		if(dp[i][j] != -1) return dp[i][j];
		int top = f(dp,i-1,j);
		int left = f(dp,i,j-1);
		return dp[i][j] = left+top;
	}
	public static int uniquePaths(int m, int n) {
		int[][] dp = new int[m][n];
		for(int i=0;i<m;i++){
			Arrays.fill(dp[i],-1);
		}
		return f(dp,m-1,n-1);
	}
}

// TABULATION - Time - O(M x N)  Space - O(M x N)

import java.util.* ;
import java.io.*; 
public class Solution {
	public static int uniquePaths(int m, int n) {
		int[][] dp = new int[m][n];
		for(int i=0;i<m;i++){
			for(int j=0;j<n;j++){
				if(i==0||j==0){
					dp[i][j] = 1;
				}
				else{
					dp[i][j] = dp[i-1][j] + dp[i][j-1];
				}
			}
		}
		return dp[m-1][n-1];
	}
}

// TABULATION - Time - O(M x N)  Space - O(N)

import java.util.* ;
import java.io.*; 
public class Solution {
	public static int uniquePaths(int m, int n) {
		if(m==1 || n==1) return 1;
		int[] dp = new int[n];
		Arrays.fill(dp,1);
		for(int i=1;i<m;i++){
			for(int j=1;j<n;j++){
				dp[j]+=dp[j-1];
			}
		}
		return dp[n-1];
	}
}