https://leetcode.com/problems/partition-equal-subset-sum/description/

class Solution {
    public boolean canPartition(int[] nums) {
        int sum=0;
        for(int i=0;i<nums.length;i++){
            sum+=nums[i];
        }
        if(sum%2==1) return false;
        sum=sum/2;
        boolean[] dp = new boolean[sum+1];
        dp[0] = true;
        for(int i=0;i<nums.length;i++){
            for(int j=sum;j>=nums[i];j--){
                dp[j] = dp[j] || dp[j-nums[i]];
            }
        }
        return dp[sum];
    }
}

or

class Solution {
    public boolean canPartition(int[] nums) {
        int sum=0;
        for(int i=0;i<nums.length;i++){
            sum+=nums[i];
        }
        if(sum%2==1) return false;
        sum=sum/2;
        boolean[] dp = new boolean[sum+1];
        dp[0] = true;
        if(nums[0]<=sum) dp[nums[0]] = true;
        for(int i=1;i<nums.length;i++){
            boolean[] cur = new boolean[sum+1];
            cur[0] = true;
            for(int j=1;j<=sum;j++){
                boolean not_take = dp[j];
                boolean take = false;
                if(nums[i]<=j){
                    take = dp[j-nums[i]];
                }
                cur[j] = take || not_take;
            }
            dp=cur;
        }
        return dp[sum];
    }
}