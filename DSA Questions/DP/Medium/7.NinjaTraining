https://www.naukri.com/code360/problems/ninja-s-training_3621003?leftPanelTabValue=PROBLEM       2D DP

//Memorization

import java.util.*;
public class Solution {
    public static int f(int day,int last, int points[][], int dp[][]){
        if(day==0){
            int maxi=0;
            for(int i=0;i<3;i++){
                if(i!=last){
                    maxi = Math.max(points[day][i],maxi);
                }
            }
            return maxi;
        }
        if(dp[day][last] != -1) return dp[day][last];

        int maxi=0;
        for(int i=0;i<3;i++){
            if(i!=last){
                int point = points[day][i] + f(day-1,i,points,dp);
                maxi = Math.max(maxi,point);
            }
        }
        return dp[day][last] = maxi;
    }
    public static int ninjaTraining(int n, int points[][]) {
        int[][] dp = new int[n][4];
        for(int i=0;i<n;i++){
            Arrays.fill(dp[i],-1);
        }
        return f(n-1,3,points,dp);
    }

}

// Tabulation

import java.util.*;
public class Solution {
    public static int ninjaTraining(int n, int points[][]) {
        int[][] dp = new int[n][4];
        dp[0][0] = Math.max(points[0][1],points[0][2]);
        dp[0][1] = Math.max(points[0][0],points[0][2]);
        dp[0][2] = Math.max(points[0][0],points[0][1]);
        dp[0][3] = Math.max(points[0][0],Math.max(points[0][1],points[0][2]));

        for(int day=1;day<n;day++){
            for(int last=0;last<4;last++){
                dp[day][last] = 0;
                for(int i=0;i<3;i++){
                    if(i!=last){
                        int point = points[day][i] + dp[day-1][i];
                        dp[day][last] = Math.max(dp[day][last], point);
                    }
                }
            }
        }
        return dp[n-1][3];
    }

}

//Space Optimization

import java.util.*;
public class Solution {
    public static int ninjaTraining(int n, int points[][]) {
        int[] dp = new int[4];
        dp[0] = Math.max(points[0][1],points[0][2]);
        dp[1] = Math.max(points[0][0],points[0][2]);
        dp[2] = Math.max(points[0][0],points[0][1]);
        dp[3] = Math.max(points[0][0],Math.max(points[0][1],points[0][2]));

        for(int day=1;day<n;day++){
            int[] cur = new int[4];
            for(int last=0;last<4;last++){
                cur[last] = 0;
                for(int i=0;i<3;i++){
                    if(i!=last){
                        cur[last] = Math.max(cur[last], points[day][i] + dp[i]);
                    }
                }
            }
            dp=cur;
        }
        return dp[3];
    }

}